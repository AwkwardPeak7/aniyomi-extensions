package eu.kanade.tachiyomi.animesource.online

import eu.kanade.tachiyomi.network.NetworkHelper
import eu.kanade.tachiyomi.animesource.AnimeCatalogueSource
import eu.kanade.tachiyomi.animesource.model.*
import okhttp3.Headers
import okhttp3.OkHttpClient

/**
 * A simple implementation for sources from a website.
 * Usually requires the usage of json serialization or similar techniques.
 */
@Suppress("unused", "unused_parameter", "UnusedReceiverParameter")
abstract class AnimeHttpSource : AnimeCatalogueSource {

    /**
     * Network service.
     */
    protected val network: NetworkHelper = throw Exception("Stub!")

    /**
     * Base url of the website without the trailing slash, like: http://mysite.com
     */
    abstract val baseUrl: String

    /**
     * Version id used to generate the source id. If the site completely changes and urls are
     * incompatible, you may increase this value and it'll be considered as a new source.
     */
    open val versionId: Int = throw Exception("Stub!")

    /**
     * ID of the source. By default it uses a generated id using the first 16 characters (64 bits)
     * of the MD5 of the string `"${name.lowercase()}/$lang/$versionId"`.
     *
     * The ID is generated by the [generateId] function, which can be reused if needed
     * to generate outdated IDs for cases where the source name or language needs to
     * be changed but migrations can be avoided.
     *
     * Note: the generated ID sets the sign bit to `0`.
     */
    override val id: Long = throw Exception("Stub!")

    /**
     * Headers used for requests. Result of [headersBuilder]
     */
    val headers: Headers = throw Exception("Stub!")

    /**
     * Default network client for doing requests. Implementations can override this property
     * for custom [OkHttpClient] instances.
     *
     * **Usage example:**
     * ```
     * import okhttp3.Dns
     * .....
     * override val client: OkHttpClient = 
     *     network.client
     *         .newBuilder()
     *         .addInterceptor(RecaptchaDestroyer())
     *         .dns(Dns.SYSTEM)
     *         .build()
     * ```
     */
    open val client: OkHttpClient = throw Exception("Stub!")

    /**
     * Generates a unique ID for the source based on the provided [name], [lang] and
     * [versionId]. It will use the first 16 characters (64 bits) of the MD5 of the string
     * `"${name.lowercase()}/$lang/$versionId"`.
     *
     * Note: the generated ID sets the sign bit to `0`.
     *
     * Can be used to generate outdated IDs, such as when the source name or language
     * needs to be changed but migrations can be avoided.
     *
     * @since extensions-lib 14
     * @param name [String] the name of the source
     * @param lang [String] the language of the source
     * @param versionId [Int] the version ID of the source
     * @return a unique ID for the source
     */
    protected fun generateId(name: String, lang: String, versionId: Int): Long {
        throw Exception("Stub!")
    }

    /**
     * Headers builder for requests. Implementations can override this method for custom headers.
     *
     * **Usage examples:**
     * ```
     * // Adds headers to the default [Headers.Builder] instance, retaining
     * // headers like the default(or user-made) User-Agent.
     * override fun headersBuilder() = super.headersBuilder().add("Referer", baseUrl)
     * ```
     * ```
     * // Creates a new, empty [Headers.Builder] instance and adds a single header.
     * override fun headersBuilder() = Headers.Builder().add("Referer", baseUrl)
     * ```
     */
    protected open fun headersBuilder(): Headers.Builder {
        throw Exception("Stub!")
    }

    /**
     * Visible name of the source.
     */
    override fun toString(): String {
        throw Exception("Stub!")
    }

    /**
     * Sorts the video list.
     * Override this according to the user's preference.
     *
     * **Usage examples:**
     * ```
     * // Sorts by quality
     * override fun List<Video>.sort(): List<Video> {
     *     val quality = preferences.getString(PREF_QUALITY_KEY, PREF_QUALITY_DEFAULT)!!
     *     return sortedWith(
     *         compareBy { it.quality.contains(quality) }
     *     ).reversed()
     * }
     * ```
     * ```
     * // Sorts by quality and hardsub language
     * override fun List<Video>.sort(): List<Video> {
     *    val quality = preferences.getString(PREF_QUALITY_KEY, PREF_QUALITY_DEFAULT)!!
     *    val lang = preferences.getString(PREF_LANG_KEY, PREF_LANG_DEFAULT)!!
     *    return sortedWith(
     *        compareBy(
     *            { it.quality.contains(quality) },
     *            { it.quality.contains(lang) },
     *        ),
     *    ).reversed()
     * }
     * ```
     */
    protected open fun List<Video>.sort(): List<Video> {
        throw Exception("Stub!")
    }

    /**
     * Assigns the url of the episode without the scheme and domain. It saves some redundancy from
     * database and the urls could still work after a domain change.
     *
     * @param url the full url to the episode.
     */
    fun SEpisode.setUrlWithoutDomain(url: String) {
        throw Exception("Stub!")
    }

    /**
     * Assigns the url of the anime without the scheme and domain. It saves some redundancy from
     * database and the urls could still work after a domain change.
     *
     * @param url the full url to the anime.
     */
    fun SAnime.setUrlWithoutDomain(url: String) {
        throw Exception("Stub!")
    }

    /**
     * Returns the url of the given string without the scheme and domain.
     *
     * @param orig the full url.
     */
    private fun getUrlWithoutDomain(orig: String): String {
        throw Exception("Stub!")
    }


    /**
     * Returns the url of the provided anime. Useful to fix "open in webview" 
     * without overriding [getAnimeDetails].
     *
     * @since extensions-lib 14
     * @param anime the anime
     * @return url of the anime
     */
    abstract fun getAnimeUrl(anime: SAnime): String

    /**
     * Returns the url of the provided episode.
     *
     * @since extensions-lib 14
     * @param episode the episode
     * @return url of the episode
     */
    abstract fun getEpisodeUrl(episode: SEpisode): String

    /**
     * Called before inserting a new episode into database. Use it if you need to override episode
     * fields, like the title or the episode number. Do not change anything to [anime].
     *
     * @param episode the episode to be added.
     * @param anime the anime of the episode.
     */
    open fun prepareNewEpisode(episode: SEpisode, anime: SAnime) {}

    /**
     * Returns the list of filters for the source.
     */
    override fun getFilterList(): AnimeFilterList {
        throw Exception("Stub!")
    }
}
